<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Interface - WeightLoss Tracker</title>
    <!-- Jquery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- Boostrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <!-- Schema Logger -->
    <script src="../schema-logger.js"></script>
    
    <style>
        .test-card {
            margin: 20px 0;
            transition: all 0.3s ease;
        }
        .test-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,.25);
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 10px;
        }
        .status-success { background-color: #28a745; }
        .status-error { background-color: #dc3545; }
        .status-running { background-color: #ffc107; animation: pulse 1s infinite; }
        .status-idle { background-color: #6c757d; }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .result-container {
            max-height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 0.75rem;
            font-family: monospace;
            font-size: 0.875rem;
        }
        
        .card-title h5 {
            font-size: 1.1rem;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <a href="../index.php" class="btn btn-outline-primary">
                        <i class="fa fa-arrow-left"></i> Back to Home
                    </a>
                </div>
                <div id="alert-container"></div>
                
                <h3 class="mt-4 mb-3">
                    <i class="fa fa-flask"></i> Tests
                </h3>
                
                <div class="row">
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-api"></span>
                                    API Tests
                                </h5>
                                <button class="btn btn-primary btn-test" data-test="api">Run API Tests</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-database"></span>
                                    Database Tests
                                </h5>
                                <button class="btn btn-primary btn-test" data-test="database">Run DB Tests</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-cypress"></span>
                                    E2E Tests
                                </h5>
                                <button class="btn btn-success btn-test" data-test="cypress">Run E2E Tests</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-schema"></span>
                                    Schema Tests
                                </h5>
                                <button class="btn btn-info btn-test" data-test="schema">Run Schema Tests</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-health"></span>
                                    Health Check
                                </h5>
                                <button class="btn btn-warning btn-test" data-test="health">Run Health Check</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-all"></span>
                                    Run All Tests
                                </h5>
                                <button class="btn btn-dark btn-test" data-test="all">Run All Tests</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <h3 class="mt-4 mb-3">
                    <i class="fa fa-cogs"></i> Functions
                </h3>
                
                <div class="row">
                    <div class="col-md-3">
                        <div class="card test-card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <span class="status-indicator status-idle" id="status-seeder"></span>
                                    Database Seeder
                                </h5>
                                <div class="btn-group-vertical w-100" role="group">
                                    <button class="btn btn-outline-danger btn-sm btn-test" data-test="seed-test">
                                        <span class="status-indicator status-idle" id="status-seedtest"></span>
                                        Reset Test Schema
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm btn-test" data-test="seed-dev">
                                        <span class="status-indicator status-idle" id="status-seeddev"></span>
                                        Reset Dev Schema
                                    </button>
                                    <button class="btn btn-outline-warning btn-sm btn-test" data-test="migrate-live">
                                        <span class="status-indicator status-idle" id="status-migrate"></span>
                                        Migrate Live Schema
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4><i class="fa fa-terminal"></i> System Log</h4>
                        <button class="btn btn-secondary btn-sm" id="clear-results">Clear Log</button>
                    </div>
                    <div class="result-container" id="test-results">
                        <div class="text-muted">System operations and test results will appear here...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            $('.btn-test').click(function() {
                const testType = $(this).data('test');
                runTest(testType);
            });
            
            $('#clear-results').click(function() {
                clearResults();
            });
        });
        
        function runTest(testType) {
            updateTestStatus(testType, 'running');
            appendResult(`🚀 Starting ${testType} tests...`);
            
            // Simulate different test types
            switch(testType) {
                case 'api':
                    runApiTests();
                    break;
                case 'database':
                    runDatabaseTests();
                    break;
                case 'cypress':
                    runCypressTests();
                    break;
                case 'schema':
                    runSchemaTests();
                    break;
                case 'health':
                    runHealthCheck();
                    break;
                case 'seed-test':
                    runSchemaReset('wt_test');
                    break;
                case 'seed-dev':
                    runSchemaReset('wt_dev');
                    break;
                case 'migrate-live':
                    runLiveMigration();
                    break;
                case 'all':
                    runAllTests();
                    break;
            }
        }
        
        function runApiTests() {
            appendResult('📡 Testing API endpoint: /router.php?controller=get1');
            
            $.post('../router.php?controller=get1', { page: 1 }, function(response) {
                try {
                    const data = JSON.parse(response);
                    if (Array.isArray(data)) {
                        appendResult(`✅ API Test PASSED: Retrieved ${data.length} records`);
                        updateTestStatus('api', 'success');
                    } else {
                        appendResult(`❌ API Test FAILED: Invalid response format`);
                        updateTestStatus('api', 'error');
                    }
                } catch (e) {
                    appendResult(`❌ API Test FAILED: ${e.message}`);
                    updateTestStatus('api', 'error');
                }
            }).catch(function() {
                appendResult('❌ API Test FAILED: Network error');
                updateTestStatus('api', 'error');
            });
        }
        
        function runDatabaseTests() {
            appendResult('🗄️ Testing database connection and queries...');
            
            // Test current schema
            $.post('../router.php?controller=schema', { action: 'get' }, function(response) {
                try {
                    const schemaData = JSON.parse(response);
                    appendResult(`📋 Current schema: ${schemaData.schema}`);
                    
                    // Test data retrieval
                    $.post('../router.php?controller=get1', { page: 1 }, function(dataResponse) {
                        try {
                            const data = JSON.parse(dataResponse);
                            appendResult(`✅ Database Test PASSED: Connected to ${schemaData.schema}`);
                            updateTestStatus('database', 'success');
                        } catch (e) {
                            appendResult(`❌ Database Test FAILED: Query error`);
                            updateTestStatus('database', 'error');
                        }
                    });
                } catch (e) {
                    appendResult(`❌ Database Test FAILED: Schema check failed`);
                    updateTestStatus('database', 'error');
                }
            });
        }
        
        function runCypressTests() {
            appendResult('🌲 Simulating Cypress E2E tests...');
            appendResult('Note: This is a simulation. Run "npx cypress run" in terminal for real tests.');
            
            // Simulate test execution
            setTimeout(() => {
                appendResult('🔍 Running smoke tests...');
            }, 1000);
            
            setTimeout(() => {
                appendResult('🔧 Running schema switching tests...');
            }, 2000);
            
            setTimeout(() => {
                appendResult('✅ E2E Tests PASSED: All tests completed successfully');
                updateTestStatus('cypress', 'success');
            }, 3000);
        }
        
        function runSchemaTests() {
            appendResult('🔄 Testing schema switching functionality...');
            const schemas = ['wt_test', 'wt_dev', 'wt_live'];
            let testCount = 0;
            
            schemas.forEach((schema, index) => {
                setTimeout(() => {
                    appendResult(`🔍 Testing schema: ${schema}`);
                    
                    // Simulate schema validation
                    $.post('../router.php?controller=schema', { 
                        action: 'switch', 
                        schema: schema 
                    }, function(response) {
                        const data = JSON.parse(response);
                        if (data.success) {
                            appendResult(`✅ Schema ${schema}: VALID`);
                        } else {
                            appendResult(`❌ Schema ${schema}: ${data.message}`);
                        }
                        
                        testCount++;
                        if (testCount === schemas.length) {
                            appendResult('✅ Schema Tests COMPLETED');
                            updateTestStatus('schema', 'success');
                        }
                    });
                }, index * 1000);
            });
        }
        
        function runHealthCheck() {
            appendResult('🏥 Running system health check...');
            
            const checks = [
                { name: 'API Endpoint', test: () => $.post('../router.php?controller=get1', {page: 1}) },
                { name: 'Schema Service', test: () => $.post('../router.php?controller=schema', {action: 'get'}) }
            ];
            
            let completedChecks = 0;
            let failedChecks = 0;
            
            checks.forEach((check, index) => {
                setTimeout(() => {
                    appendResult(`🔍 Checking ${check.name}...`);
                    
                    check.test()
                        .done(() => {
                            appendResult(`✅ ${check.name}: HEALTHY`);
                        })
                        .fail(() => {
                            appendResult(`❌ ${check.name}: UNHEALTHY`);
                            failedChecks++;
                        })
                        .always(() => {
                            completedChecks++;
                            if (completedChecks === checks.length) {
                                if (failedChecks === 0) {
                                    appendResult('✅ Health Check PASSED: All systems healthy');
                                    updateTestStatus('health', 'success');
                                } else {
                                    appendResult(`❌ Health Check FAILED: ${failedChecks} issues found`);
                                    updateTestStatus('health', 'error');
                                }
                            }
                        });
                }, index * 500);
            });
        }
        
        function runAllTests() {
            appendResult('🚀 Running complete test suite...');
            const tests = ['api', 'database', 'health', 'schema'];
            let currentTest = 0;
            
            function runNextTest() {
                if (currentTest < tests.length) {
                    const testType = tests[currentTest];
                    appendResult(`\n--- Running ${testType.toUpperCase()} Tests ---`);
                    
                    setTimeout(() => {
                        runTest(testType);
                        currentTest++;
                        setTimeout(runNextTest, 3000);
                    }, 1000);
                } else {
                    appendResult('\n🏁 ALL TESTS COMPLETED!');
                    updateTestStatus('all', 'success');
                }
            }
            
            runNextTest();
        }
        
        function updateTestStatus(testType, status) {
            const statusEl = $(`#status-${testType}`);
            statusEl.removeClass('status-idle status-running status-success status-error');
            statusEl.addClass(`status-${status}`);
        }
        
        function appendResult(message) {
            const timestamp = new Date().toLocaleTimeString();
            const resultEl = $('#test-results');
            
            if (resultEl.children().first().hasClass('text-muted')) {
                resultEl.empty();
            }
            
            resultEl.append(`<div>[${timestamp}] ${message}</div>`);
            resultEl.scrollTop(resultEl[0].scrollHeight);
        }
        
        function clearResults() {
            $('#test-results').html('<div class="text-muted">System operations and test results will appear here...</div>');
            $('.status-indicator').removeClass('status-running status-success status-error').addClass('status-idle');
        }
        
        
        function runSchemaReset(schema) {
            const schemaName = schema.replace('wt_', '');
            const statusId = schema === 'wt_test' ? 'seedtest' : 'seeddev';
            
            // Show alert and update status
            showAlert(`Running ${schemaName} schema reset...`, 'info');
            updateTestStatus(statusId, 'running');
            appendResult(`🗄️ Resetting ${schemaName} schema with fresh data...`);
            
            $.post('../router.php?controller=seeder', { 
                action: 'reset_schema',
                schema: schema
            }, function(response) {
                try {
                    const data = JSON.parse(response);
                    if (data.success) {
                        showAlert(`${schemaName} schema reset completed successfully!`, 'success');
                        appendResult(`✅ ${schemaName} schema reset successfully!`);
                        
                        if (data.verification && data.verification[schema]) {
                            const info = data.verification[schema];
                            appendResult(`📊 ${schemaName} verification: ${info.tables.length} tables, ${Object.values(info.record_counts).reduce((a, b) => a + b, 0)} total records`);
                            Object.entries(info.record_counts).forEach(([table, count]) => {
                                appendResult(`    - ${table}: ${count} records`);
                            });
                        }
                        
                        updateTestStatus(statusId, 'success');
                    } else {
                        showAlert(`${schemaName} schema reset failed: ${data.message}`, 'danger');
                        appendResult(`❌ ${schemaName} reset failed: ${data.message}`);
                        updateTestStatus(statusId, 'error');
                    }
                } catch (e) {
                    showAlert(`${schemaName} schema reset failed: ${e.message}`, 'danger');
                    appendResult(`❌ ${schemaName} reset failed: ${e.message}`);
                    updateTestStatus(statusId, 'error');
                }
            }).catch(function() {
                showAlert(`${schemaName} schema reset failed: Network error`, 'danger');
                appendResult(`❌ ${schemaName} reset failed: Network error`);
                updateTestStatus(statusId, 'error');
            });
        }
        
        function runLiveMigration() {
            showAlert('Running live schema migration...', 'info');
            updateTestStatus('migrate', 'running');
            appendResult('⚡ Running live schema migration (non-destructive)...');
            
            $.post('../router.php?controller=seeder', { 
                action: 'migrate_live'
            }, function(response) {
                try {
                    const data = JSON.parse(response);
                    if (data.success) {
                        showAlert('Live schema migration completed successfully!', 'success');
                        appendResult('✅ Live schema migration completed successfully!');
                        
                        if (data.verification) {
                            const info = data.verification;
                            if (info.exists) {
                                appendResult(`📊 Live verification: ${info.tables.length} tables, ${Object.values(info.record_counts).reduce((a, b) => a + b, 0)} total records`);
                                Object.entries(info.record_counts).forEach(([table, count]) => {
                                    appendResult(`    - ${table}: ${count} records`);
                                });
                            }
                        }
                        
                        updateTestStatus('migrate', 'success');
                    } else {
                        showAlert(`Live migration failed: ${data.message}`, 'danger');
                        appendResult(`❌ Live migration failed: ${data.message}`);
                        updateTestStatus('migrate', 'error');
                    }
                } catch (e) {
                    showAlert(`Live migration failed: ${e.message}`, 'danger');
                    appendResult(`❌ Live migration failed: ${e.message}`);
                    updateTestStatus('migrate', 'error');
                }
            }).catch(function() {
                showAlert('Live migration failed: Network error', 'danger');
                appendResult('❌ Live migration failed: Network error');
                updateTestStatus('migrate', 'error');
            });
        }

        function showAlert(message, type) {
            const alertClass = `alert-${type}`;
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `;
            
            $('#alert-container').html(alertHtml);
            
            // Auto-dismiss success/info alerts after 5 seconds
            if (type === 'success' || type === 'info') {
                setTimeout(() => {
                    $('#alert-container .alert').alert('close');
                }, 5000);
            }
        }
    </script>
</body>
</html>
